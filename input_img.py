# -*- coding: utf-8 -*-
"""input_ img.py

Automatically generated by Colaboratory.

"""

# A feature engineering approach for modeling ternary perovskite target properties by Fourier transforming direct features into the periodic reciprocal crystal lattice 

# AUTHOR - (1) * Ericsson Chenebuah, (1) Michel Nganbe and (2) Alain Tchagang 
# 1: Department of Mechanical Engineering, University of Ottawa, 75 Laurier Ave. East, Ottawa, ON, K1N 6N5 Canada
# 2: Digital Technologies Research Centre, National Research Council of Canada, 1200 Montr√©al Road, Ottawa, ON, K1A 0R6 Canada
# * email: echen013@uottawa.ca 
# (28-May-2022)


## THIS SOURCE CODE BUILDS THE HIGH DIMENSIONAL INPUT IMAGE/DESCRIPTOR. The input features are broadly separated into Direct Space Features (DSF) and Periodic Reciprocal Features (PRF) 

## Due to the large sizes of the data files, the complete data (as uploaded on GITHUB) is split and compressed into 3 different sections: data_1, data_2 and data_3. 
## Extract all files and run the codes, ensuring that the complete data files and the source code are located in the same directory.

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler


# Normalization of features. Note that the categorical real features in the DSF block are not normalized because they are simple binaries (ones and zeros) 
LV = np.asarray(pd.read_csv('lattice_vectors.csv').astype('float32'))
scaler_LV = MinMaxScaler()
LV = scaler_LV.fit_transform(LV)

ANG = np.asarray(pd.read_csv('angle.csv').astype('float32'))
scaler_ANG = MinMaxScaler()
ANG = scaler_ANG.fit_transform(ANG)

AC = np.asarray(pd.read_csv('atom_coord.csv').astype('float32'))
scaler_AC = MinMaxScaler()
AC = scaler_AC.fit_transform(AC)

RV = np.asarray(pd.read_csv('reciprocal_vectors.csv').astype('float32'))
scaler_RV = MinMaxScaler()
RV = scaler_RV.fit_transform(RV)

NP_rec = np.asarray(pd.read_csv('norm_plane_mag_rec.csv').astype('float32'))
scaler_NP_grec = MinMaxScaler()
NP_rec = scaler_NP_grec.fit_transform(NP_rec)

D_hkl = np.asarray(pd.read_csv('distance_hkl.csv').astype('float32'))
scaler_D_hkl = MinMaxScaler()
D_hkl = scaler_D_hkl.fit_transform(D_hkl)

GN_rec = np.asarray(pd.read_csv('group_rec.csv').astype('float32'))
scaler_GN_rec = MinMaxScaler()
GN_rec = scaler_GN_rec.fit_transform(GN_rec)

RN_rec = np.asarray(pd.read_csv('row_rec.csv').astype('float32'))
scaler_RN_rec = MinMaxScaler()
RN_rec = scaler_RN_rec.fit_transform(RN_rec)

EN_rec = np.asarray(pd.read_csv('electronegativity_rec.csv').astype('float32'))
scaler_EN_rec = MinMaxScaler()
EN_rec = scaler_EN_rec.fit_transform(EN_rec)

CR_rec = np.asarray(pd.read_csv('covalent_rad_rec.csv').astype('float32'))
scaler_CR_rec = MinMaxScaler()
CR_rec = scaler_CR_rec.fit_transform(CR_rec)

VL_rec = np.asarray(pd.read_csv('valence_rec.csv').astype('float32'))
scaler_VL_rec = MinMaxScaler()
VL_rec = scaler_VL_rec.fit_transform(VL_rec)

IE_rec = np.asarray(pd.read_csv('ionization_energy_rec.csv').astype('float32'))
scaler_IE_rec = MinMaxScaler()
IE_rec = scaler_IE_rec.fit_transform(IE_rec)

EA_rec = np.asarray(pd.read_csv('electron_affinity_rec.csv').astype('float32'))
scaler_EA_rec = MinMaxScaler()
EA_rec = scaler_EA_rec.fit_transform(EA_rec)

BK_rec = np.asarray(pd.read_csv('block_rec.csv').astype('float32'))
scaler_BK_rec = MinMaxScaler()
BK_rec = scaler_BK_rec.fit_transform(BK_rec)

MV_rec = np.asarray(pd.read_csv('mol_vol_rec.csv').astype('float32'))
scaler_MV_rec = MinMaxScaler()
MV_rec = scaler_MV_rec.fit_transform(MV_rec)

IR_rec = np.asarray(pd.read_csv('ionic_rad_rec.csv').astype('float32'))
scaler_IR_rec = MinMaxScaler()
IR_rec = scaler_IR_rec.fit_transform(IR_rec)

PZ_rec = np.asarray(pd.read_csv('polarizability_rec.csv').astype('float32'))
scaler_PZ_rec = MinMaxScaler()
PZ_rec = scaler_PZ_rec.fit_transform(PZ_rec)

SH_rec = np.asarray(pd.read_csv('spec_heat_rec.csv').astype('float32'))
scaler_SH_rec = MinMaxScaler()
SH_rec = scaler_SH_rec.fit_transform(SH_rec)

TC_rec = np.asarray(pd.read_csv('therm_conduct_rec.csv').astype('float32'))
scaler_TC_rec = MinMaxScaler()
TC_rec = scaler_TC_rec.fit_transform(TC_rec)


# Data processing and stacking arrangement of the DIRECT SPACE FEATURES (DSF) (i.e. continuous and categorical) as follows:

data_size = 27587

# (1) Latice base vectors (3X3 matrix)
data=[]
for i in range (0, data_size):
    LV1=LV[i,0:3]
    LV2=LV[i,3:6]
    LV3=LV[i,6:9]
    LV4=np.row_stack((LV1,LV2,LV3))
    data.append(LV4)
LV=np.array(data)

# (2) Inter-axial angles (1X3 matrix)
ANG = np.asarray(ANG)
ANG=ANG.reshape(27587,1,3)

# (3) Fractional atomic coordinates (20X3 matrix)
AC = np.asarray(AC)
data=[]
for i in range (0, data_size):
    AC1=AC[i,0:3]
    AC2=AC[i,3:6]
    AC3=AC[i,6:9]
    AC4=AC[i,9:12]
    AC5=AC[i,12:15]
    AC6=AC[i,15:18]
    AC7=AC[i,18:21]
    AC8=AC[i,21:24]
    AC9=AC[i,24:27]
    AC10=AC[i,27:30]
    AC11=AC[i,30:33]
    AC12=AC[i,33:36]
    AC13=AC[i,36:39]
    AC14=AC[i,39:42]
    AC15=AC[i,42:45]
    AC16=AC[i,45:48]
    AC17=AC[i,48:51]
    AC18=AC[i,51:54]
    AC19=AC[i,54:57]
    AC20=AC[i,57:60]
    AC21=np.row_stack((AC1,AC2,AC3,AC4,AC5,AC6,AC7,AC8,AC9,AC10,AC11,AC12,AC13,AC14,AC15,AC16,AC17,AC18,AC19,AC20))
    data.append(AC21)
AC=np.array(data)


# (4) Group Number (18X3 matrix)
GN = pd.read_csv('periodic_table.csv')
GN = np.asarray(GN)
data=[]
for i in range (0, data_size):
    GN1=GN[i,0:18]
    GN2=GN[i,18:36]
    GN3=GN[i,36:54]
    GN4=np.column_stack((GN1,GN2,GN3))
    data.append(GN4)
GN=np.array(data)

# (5) Row Number (9X3 matrix)
RN = pd.read_csv('periodic_table.csv')
RN = np.asarray(RN)
data=[]
for i in range (0, data_size):
    RN1=RN[i,54:63]
    RN2=RN[i,63:72]
    RN3=RN[i,72:81]
    RN4=np.column_stack((RN1,RN2,RN3))
    data.append(RN4)
RN=np.array(data)

# (6) Electronegativity (10X3 matrix)
EN = pd.read_csv('electronegativity.csv')
EN = np.asarray(EN)
data=[]
for i in range (0, data_size):
    EN1=EN[i,0:10]
    EN2=EN[i,10:20]
    EN3=EN[i,20:30]
    EN4=np.column_stack((EN1,EN2,EN3))
    data.append(EN4)
EN=np.array(data)

# (7) Covalent Radius (10X3 matrix)
CR = pd.read_csv('covalent_rad.csv')
CR = np.asarray(CR)
data=[]
for i in range (0, data_size):
    CR1=CR[i,0:10]
    CR2=CR[i,10:20]
    CR3=CR[i,20:30]
    CR4=np.column_stack((CR1,CR2,CR3))
    data.append(CR4)
CR=np.array(data)

# (8) Valence (9X3 matrix)
VL = pd.read_csv('valence.csv')
VL = np.asarray(VL)
data=[]
for i in range (0, data_size):
    VL1=VL[i,0:9]
    VL2=VL[i,9:18]
    VL3=VL[i,18:27]
    VL4=np.column_stack((VL1,VL2,VL3))
    data.append(VL4)
VL=np.array(data)

# (9) Ionization (10X3 matrix)
IE = pd.read_csv('ionization_energy.csv')
IE = np.asarray(IE)
data=[]
for i in range (0, data_size):
    IE1=IE[i,0:10]
    IE2=IE[i,10:20]
    IE3=IE[i,20:30]
    IE4=np.column_stack((IE1,IE2,IE3))
    data.append(IE4)
IE=np.array(data)

# (10) Electron Affinity (10X3 matrix)
EA = pd.read_csv('electron_affinity.csv')
EA = np.asarray(EA)
data=[]
for i in range (0, data_size):
    EA1=EA[i,0:10]
    EA2=EA[i,10:20]
    EA3=EA[i,20:30]
    EA4=np.column_stack((EA1,EA2,EA3))
    data.append(EA4)
EA=np.array(data)

# (11) Block (4X3 matrix)
BK = pd.read_csv('block.csv')
BK = np.asarray(BK)
data=[]
for i in range (0, data_size):
    BK1=BK[i,0:4]
    BK2=BK[i,4:8]
    BK3=BK[i,8:12]
    BK4=np.column_stack((BK1,BK2,BK3))
    data.append(BK4)
BK=np.array(data)

# (12) Molar Volume (10X3 matrix)
MV = pd.read_csv('mol_vol.csv')
MV = np.asarray(MV)
data=[]
for i in range (0, data_size):
    MV1=MV[i,0:10]
    MV2=MV[i,10:20]
    MV3=MV[i,20:30]
    MV4=np.column_stack((MV1,MV2,MV3))
    data.append(MV4)
MV=np.array(data)

# (13) Average Ionic Radius (10X3 matrix)
IR = pd.read_csv('ionic_rad.csv')
IR = np.asarray(IR)
data=[]
for i in range (0, data_size):
    IR1=IR[i,0:10]
    IR2=IR[i,10:20]
    IR3=IR[i,20:30]
    IR4=np.column_stack((IR1,IR2,IR3))
    data.append(IR4)
IR=np.array(data)

# (14) Polarizability (10X3 matrix)
PZ = pd.read_csv('polarizability.csv')
PZ = np.asarray(PZ)
data=[]
for i in range (0, data_size):
    PZ1=PZ[i,0:10]
    PZ2=PZ[i,10:20]
    PZ3=PZ[i,20:30]
    PZ4=np.column_stack((PZ1,PZ2,PZ3))
    data.append(PZ4)
PZ=np.array(data)

# (15) Specific Heat (10X3 matrix)
SH = pd.read_csv('spec_heat.csv')
SH = np.asarray(SH)
data=[]
for i in range (0, data_size):
    SH1=SH[i,0:10]
    SH2=SH[i,10:20]
    SH3=SH[i,20:30]
    SH4=np.column_stack((SH1,SH2,SH3))
    data.append(SH4)
SH=np.array(data)

# (16) Thermal Conductivity (10X3 matrix)
TC = pd.read_csv('therm_conduct.csv')
TC = np.asarray(TC)
data=[]
for i in range (0, data_size):
    TC1=TC[i,0:10]
    TC2=TC[i,10:20]
    TC3=TC[i,20:30]
    TC4=np.column_stack((TC1,TC2,TC3))
    data.append(TC4)
TC=np.array(data)

DSF=np.hstack([LV,ANG,AC,GN,RN,EN,CR,VL,IE,EA,BK,MV,IR,PZ,SH,TC])


## Data processing and stacking arrangement of the PERIODIC RECIPROCAL FEATURES (PRF) as follows:

# (1) Reciprocal lattice vectors & Angles (4X3 matrix)

data=[]
for i in range (0, data_size):
    RV1=RV[i,0:3]
    RV2=RV[i,3:6]
    RV3=RV[i,6:9]
    RV4=RV[i,9:12] # reciprocal vectors inter-angles
    
    _RV=np.row_stack((RV1,RV2,RV3,RV4))
    data.append(_RV)
_RV=np.array(data)
zeropad1=np.zeros((data_size,4,53)) # zero-padding to fit the PRF structural layout with respect to the number of crystal planes in consideration.
RV=np.concatenate((_RV,zeropad1), -1)

# (2) Magnitude of the reciprocal vector |G_min| normal to a crystal plane (1X56 matrix)
NP_rec = NP_rec[:,0:56]
NP_rec = NP_rec.reshape(data_size,1,56)

# (3) Shortest distance between similar crystallographic planes (1X56 matrix)
D_hkl = D_hkl[:,0:56]
D_hkl = D_hkl.reshape(data_size,1,56)


## The Fourier transforming operation on the categorical real features was done using quick spreasheet calculations, which is based on the structure-factor equation.
## The data arrangement process is described using the maximum numnber of crystal planes (i.e. 56 hkl planes, with the additional zero-padded (000) plane, therefore 57 in total).

# (4) Fourier-transformed Group Number (18X56 matrix)
GN_rec = np.asarray(GN_rec)
data=[]
for i in range (0, data_size):
    GN1=GN_rec[i,0:18]
    GN2=GN_rec[i,18:36]
    GN3=GN_rec[i,36:54]
    GN4=GN_rec[i,54:72]
    GN5=GN_rec[i,72:90]
    GN6=GN_rec[i,90:108]
    GN7=GN_rec[i,108:126]
    GN8=GN_rec[i,126:144]
    GN9=GN_rec[i,144:162]
    GN10=GN_rec[i,162:180]
    GN11=GN_rec[i,180:198]
    GN12=GN_rec[i,198:216]
    GN13=GN_rec[i,216:234]
    GN14=GN_rec[i,234:252]
    GN15=GN_rec[i,252:270]
    GN16=GN_rec[i,270:288]
    GN17=GN_rec[i,288:306]
    GN18=GN_rec[i,306:324]
    GN19=GN_rec[i,324:342]
    GN20=GN_rec[i,342:360]
    GN21=GN_rec[i,360:378]
    GN22=GN_rec[i,378:396]
    GN23=GN_rec[i,396:414]
    GN24=GN_rec[i,414:432]
    GN25=GN_rec[i,432:450]
    GN26=GN_rec[i,450:468]
    GN27=GN_rec[i,468:486]
    GN28=GN_rec[i,486:504]
    GN29=GN_rec[i,504:522]
    GN30=GN_rec[i,522:540]
    GN31=GN_rec[i,540:558]
    GN32=GN_rec[i,558:576]
    GN33=GN_rec[i,576:594]
    GN34=GN_rec[i,594:612]
    GN35=GN_rec[i,612:630]
    GN36=GN_rec[i,630:648]
    GN37=GN_rec[i,648:666]
    GN38=GN_rec[i,666:684]
    GN39=GN_rec[i,684:702]
    GN40=GN_rec[i,702:720]
    GN41=GN_rec[i,720:738]
    GN42=GN_rec[i,738:756]
    GN43=GN_rec[i,756:774]
    GN44=GN_rec[i,774:792]
    GN45=GN_rec[i,792:810]
    GN46=GN_rec[i,810:828]
    GN47=GN_rec[i,828:846]
    GN48=GN_rec[i,846:864]
    GN49=GN_rec[i,864:882]
    GN50=GN_rec[i,882:900]
    GN51=GN_rec[i,900:918]
    GN52=GN_rec[i,918:936]
    GN53=GN_rec[i,936:954]
    GN54=GN_rec[i,954:972]
    GN55=GN_rec[i,972:990]
    GN56=GN_rec[i,990:1008]

    _GN_rec=np.column_stack((GN1,GN2,GN3,GN4,GN5,GN6,GN7,GN8,GN9,GN10,GN11,GN12,GN13,GN14,GN15,GN16,GN17,GN18,GN19,GN20,GN21,GN22,GN23,GN24,GN25,GN26,GN27,GN28,GN29,
                             GN30,GN31,GN32,GN33,GN34,GN35,GN36,GN37,GN38,GN39,GN40,GN41,GN42,GN43,GN44,GN45,GN46,GN47,GN48,GN49,GN50,GN51,GN52,GN53,GN54,GN55,GN56))
        
    data.append(_GN_rec)
GN_rec=np.array(data)

# (5) Fourier-transformed Row Number (9X56 matrix)
RN_rec = np.asarray(RN_rec)
data=[]
for i in range (0, data_size):
    RN1=RN_rec[i,0:9]
    RN2=RN_rec[i,9:18]
    RN3=RN_rec[i,18:27]
    RN4=RN_rec[i,27:36]
    RN5=RN_rec[i,36:45]
    RN6=RN_rec[i,45:54]
    RN7=RN_rec[i,54:63]
    RN8=RN_rec[i,63:72]
    RN9=RN_rec[i,72:81]
    RN10=RN_rec[i,81:90]
    RN11=RN_rec[i,90:99]
    RN12=RN_rec[i,99:108]
    RN13=RN_rec[i,108:117]
    RN14=RN_rec[i,117:126]
    RN15=RN_rec[i,126:135]
    RN16=RN_rec[i,135:144]
    RN17=RN_rec[i,144:153]
    RN18=RN_rec[i,153:162]
    RN19=RN_rec[i,162:171]
    RN20=RN_rec[i,171:180]
    RN21=RN_rec[i,180:189]
    RN22=RN_rec[i,189:198]
    RN23=RN_rec[i,198:207]
    RN24=RN_rec[i,207:216]
    RN25=RN_rec[i,216:225]
    RN26=RN_rec[i,225:234]
    RN27=RN_rec[i,234:243]
    RN28=RN_rec[i,243:252]
    RN29=RN_rec[i,252:261]
    RN30=RN_rec[i,261:270]
    RN31=RN_rec[i,270:279]
    RN32=RN_rec[i,279:288]
    RN33=RN_rec[i,288:297]
    RN34=RN_rec[i,297:306]
    RN35=RN_rec[i,306:315]
    RN36=RN_rec[i,315:324]
    RN37=RN_rec[i,324:333]
    RN38=RN_rec[i,333:342]
    RN39=RN_rec[i,342:351]
    RN40=RN_rec[i,351:360]
    RN41=RN_rec[i,360:369]
    RN42=RN_rec[i,369:378]
    RN43=RN_rec[i,378:387]
    RN44=RN_rec[i,387:396]
    RN45=RN_rec[i,396:405]
    RN46=RN_rec[i,405:414]
    RN47=RN_rec[i,414:423]
    RN48=RN_rec[i,423:432]
    RN49=RN_rec[i,432:441]
    RN50=RN_rec[i,441:450]
    RN51=RN_rec[i,450:459]
    RN52=RN_rec[i,459:468]
    RN53=RN_rec[i,468:477]
    RN54=RN_rec[i,477:486]
    RN55=RN_rec[i,486:495]
    RN56=RN_rec[i,495:504]

    
    _RN_rec=np.column_stack((RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8,RN9,RN10,RN11,RN12,RN13,RN14,RN15,RN16,RN17,RN18,RN19,RN20,RN21,RN22,RN23,RN24,RN25,RN26,RN27,RN28,RN29,RN30,
                             RN31,RN32,RN33,RN34,RN35,RN36,RN37,RN38,RN39,RN40,RN41,RN42,RN43,RN44,RN45,RN46,RN47,RN48,RN49,RN50,RN51,RN52,RN53,RN54,RN55,RN56))
        
    data.append(_RN_rec)
RN_rec=np.array(data)

# (6) Fourier-transformed Electronegativity (10X56 matrix)
EN_rec = np.asarray(EN_rec)
data=[]
for i in range (0, data_size):
    EN1=EN_rec[i,0:10]
    EN2=EN_rec[i,10:20]
    EN3=EN_rec[i,20:30]
    EN4=EN_rec[i,30:40]
    EN5=EN_rec[i,40:50]
    EN6=EN_rec[i,50:60]
    EN7=EN_rec[i,60:70]
    EN8=EN_rec[i,70:80]
    EN9=EN_rec[i,80:90]
    EN10=EN_rec[i,90:100]
    EN11=EN_rec[i,100:110]
    EN12=EN_rec[i,110:120]
    EN13=EN_rec[i,120:130]
    EN14=EN_rec[i,130:140]
    EN15=EN_rec[i,140:150]
    EN16=EN_rec[i,150:160]
    EN17=EN_rec[i,160:170]
    EN18=EN_rec[i,170:180]
    EN19=EN_rec[i,180:190]
    EN20=EN_rec[i,190:200]
    EN21=EN_rec[i,200:210]
    EN22=EN_rec[i,210:220]
    EN23=EN_rec[i,220:230]
    EN24=EN_rec[i,230:240]
    EN25=EN_rec[i,240:250]
    EN26=EN_rec[i,250:260]
    EN27=EN_rec[i,260:270]
    EN28=EN_rec[i,270:280]
    EN29=EN_rec[i,280:290]
    EN30=EN_rec[i,290:300]
    EN31=EN_rec[i,300:310]
    EN32=EN_rec[i,310:320]
    EN33=EN_rec[i,320:330]
    EN34=EN_rec[i,330:340]
    EN35=EN_rec[i,340:350]
    EN36=EN_rec[i,350:360]
    EN37=EN_rec[i,360:370]
    EN38=EN_rec[i,370:380]
    EN39=EN_rec[i,380:390]
    EN40=EN_rec[i,390:400]
    EN41=EN_rec[i,400:410]
    EN42=EN_rec[i,410:420]
    EN43=EN_rec[i,420:430]
    EN44=EN_rec[i,430:440]
    EN45=EN_rec[i,440:450]
    EN46=EN_rec[i,450:460]
    EN47=EN_rec[i,460:470]
    EN48=EN_rec[i,470:480]
    EN49=EN_rec[i,480:490]
    EN50=EN_rec[i,490:500]
    EN51=EN_rec[i,500:510]
    EN52=EN_rec[i,510:520]
    EN53=EN_rec[i,520:530]
    EN54=EN_rec[i,530:540]
    EN55=EN_rec[i,540:550]
    EN56=EN_rec[i,550:560]
  
    _EN_rec=np.column_stack((EN1,EN2,EN3,EN4,EN5,EN6,EN7,EN8,EN9,EN10,EN11,EN12,EN13,EN14,EN15,EN16,EN17,EN18,EN19,EN20,EN21,EN22,EN23,EN24,EN25,EN26,EN27,EN28,EN29,EN30,
                             EN31,EN32,EN33,EN34,EN35,EN36,EN37,EN38,EN39,EN40,EN41,EN42,EN43,EN44,EN45,EN46,EN47,EN48,EN49,EN50,EN51,EN52,EN53,EN54,EN55,EN56))
        
    data.append(_EN_rec)
EN_rec=np.array(data)

# (7) Fourier-transformed Covalent Radius (10X56 matrix)
CR_rec = np.asarray(CR_rec)
data=[]
for i in range (0, data_size):
    CR1=CR_rec[i,0:10]
    CR2=CR_rec[i,10:20]
    CR3=CR_rec[i,20:30]
    CR4=CR_rec[i,30:40]
    CR5=CR_rec[i,40:50]
    CR6=CR_rec[i,50:60]
    CR7=CR_rec[i,60:70]
    CR8=CR_rec[i,70:80]
    CR9=CR_rec[i,80:90]
    CR10=CR_rec[i,90:100]
    CR11=CR_rec[i,100:110]
    CR12=CR_rec[i,110:120]
    CR13=CR_rec[i,120:130]
    CR14=CR_rec[i,130:140]
    CR15=CR_rec[i,140:150]
    CR16=CR_rec[i,150:160]
    CR17=CR_rec[i,160:170]
    CR18=CR_rec[i,170:180]
    CR19=CR_rec[i,180:190]
    CR20=CR_rec[i,190:200]
    CR21=CR_rec[i,200:210]
    CR22=CR_rec[i,210:220]
    CR23=CR_rec[i,220:230]
    CR24=CR_rec[i,230:240]
    CR25=CR_rec[i,240:250]
    CR26=CR_rec[i,250:260]
    CR27=CR_rec[i,260:270]
    CR28=CR_rec[i,270:280]
    CR29=CR_rec[i,280:290]
    CR30=CR_rec[i,290:300]
    CR31=CR_rec[i,300:310]
    CR32=CR_rec[i,310:320]
    CR33=CR_rec[i,320:330]
    CR34=CR_rec[i,330:340]
    CR35=CR_rec[i,340:350]
    CR36=CR_rec[i,350:360]
    CR37=CR_rec[i,360:370]
    CR38=CR_rec[i,370:380]
    CR39=CR_rec[i,380:390]
    CR40=CR_rec[i,390:400]
    CR41=CR_rec[i,400:410]
    CR42=CR_rec[i,410:420]
    CR43=CR_rec[i,420:430]
    CR44=CR_rec[i,430:440]
    CR45=CR_rec[i,440:450]
    CR46=CR_rec[i,450:460]
    CR47=CR_rec[i,460:470]
    CR48=CR_rec[i,470:480]
    CR49=CR_rec[i,480:490]
    CR50=CR_rec[i,490:500]
    CR51=CR_rec[i,500:510]
    CR52=CR_rec[i,510:520]
    CR53=CR_rec[i,520:530]
    CR54=CR_rec[i,530:540]
    CR55=CR_rec[i,540:550]
    CR56=CR_rec[i,550:560]
  
    _CR_rec=np.column_stack((CR1,CR2,CR3,CR4,CR5,CR6,CR7,CR8,CR9,CR10,CR11,CR12,CR13,CR14,CR15,CR16,CR17,CR18,CR19,CR20,CR21,CR22,CR23,CR24,CR25,CR26,CR27,CR28,CR29,
                             CR30,CR31,CR32,CR33,CR34,CR35,CR36,CR37,CR38,CR39,CR40,CR41,CR42,CR43,CR44,CR45,CR46,CR47,CR48,CR49,CR50,CR51,CR52,CR53,CR54,CR55,CR56))
       
    data.append(_CR_rec)
CR_rec=np.array(data)

# (8) Fourier-transformed Valence (9X56 matrix)
VL_rec = np.asarray(VL_rec)
data=[]
for i in range (0, data_size):
    VL1=VL_rec[i,0:9]
    VL2=VL_rec[i,9:18]
    VL3=VL_rec[i,18:27]
    VL4=VL_rec[i,27:36]
    VL5=VL_rec[i,36:45]
    VL6=VL_rec[i,45:54]
    VL7=VL_rec[i,54:63]
    VL8=VL_rec[i,63:72]
    VL9=VL_rec[i,72:81]
    VL10=VL_rec[i,81:90]
    VL11=VL_rec[i,90:99]
    VL12=VL_rec[i,99:108]
    VL13=VL_rec[i,108:117]
    VL14=VL_rec[i,117:126]
    VL15=VL_rec[i,126:135]
    VL16=VL_rec[i,135:144]
    VL17=VL_rec[i,144:153]
    VL18=VL_rec[i,153:162]
    VL19=VL_rec[i,162:171]
    VL20=VL_rec[i,171:180]
    VL21=VL_rec[i,180:189]
    VL22=VL_rec[i,189:198]
    VL23=VL_rec[i,198:207]
    VL24=VL_rec[i,207:216]
    VL25=VL_rec[i,216:225]
    VL26=VL_rec[i,225:234]
    VL27=VL_rec[i,234:243]
    VL28=VL_rec[i,243:252]
    VL29=VL_rec[i,252:261]
    VL30=VL_rec[i,261:270]
    VL31=VL_rec[i,270:279]
    VL32=VL_rec[i,279:288]
    VL33=VL_rec[i,288:297]
    VL34=VL_rec[i,297:306]
    VL35=VL_rec[i,306:315]
    VL36=VL_rec[i,315:324]
    VL37=VL_rec[i,324:333]
    VL38=VL_rec[i,333:342]
    VL39=VL_rec[i,342:351]
    VL40=VL_rec[i,351:360]
    VL41=VL_rec[i,360:369]
    VL42=VL_rec[i,369:378]
    VL43=VL_rec[i,378:387]
    VL44=VL_rec[i,387:396]
    VL45=VL_rec[i,396:405]
    VL46=VL_rec[i,405:414]
    VL47=VL_rec[i,414:423]
    VL48=VL_rec[i,423:432]
    VL49=VL_rec[i,432:441]
    VL50=VL_rec[i,441:450]
    VL51=VL_rec[i,450:459]
    VL52=VL_rec[i,459:468]
    VL53=VL_rec[i,468:477]
    VL54=VL_rec[i,477:486]
    VL55=VL_rec[i,486:495]
    VL56=VL_rec[i,495:504]
    
    _VL_rec=np.column_stack((VL1,VL2,VL3,VL4,VL5,VL6,VL7,VL8,VL9,VL10,VL11,VL12,VL13,VL14,VL15,VL16,VL17,VL18,VL19,VL20,VL21,VL22,VL23,VL24,VL25,VL26,VL27,VL28,VL29,
                             VL30,VL31,VL32,VL33,VL34,VL35,VL36,VL37,VL38,VL39,VL40,VL41,VL42,VL43,VL44,VL45,VL46,VL47,VL48,VL49,VL50,VL51,VL52,VL53,VL54,VL55,VL56))
        
    data.append(_VL_rec)
VL_rec=np.array(data)

# (9) Fourier-transformed Ionization Energy (10X56 matrix)
IE_rec = np.asarray(IE_rec)
data=[]
for i in range (0, data_size):
    IE1=IE_rec[i,0:10]
    IE2=IE_rec[i,10:20]
    IE3=IE_rec[i,20:30]
    IE4=IE_rec[i,30:40]
    IE5=IE_rec[i,40:50]
    IE6=IE_rec[i,50:60]
    IE7=IE_rec[i,60:70]
    IE8=IE_rec[i,70:80]
    IE9=IE_rec[i,80:90]
    IE10=IE_rec[i,90:100]
    IE11=IE_rec[i,100:110]
    IE12=IE_rec[i,110:120]
    IE13=IE_rec[i,120:130]
    IE14=IE_rec[i,130:140]
    IE15=IE_rec[i,140:150]
    IE16=IE_rec[i,150:160]
    IE17=IE_rec[i,160:170]
    IE18=IE_rec[i,170:180]
    IE19=IE_rec[i,180:190]
    IE20=IE_rec[i,190:200]
    IE21=IE_rec[i,200:210]
    IE22=IE_rec[i,210:220]
    IE23=IE_rec[i,220:230]
    IE24=IE_rec[i,230:240]
    IE25=IE_rec[i,240:250]
    IE26=IE_rec[i,250:260]
    IE27=IE_rec[i,260:270]
    IE28=IE_rec[i,270:280]
    IE29=IE_rec[i,280:290]
    IE30=IE_rec[i,290:300]
    IE31=IE_rec[i,300:310]
    IE32=IE_rec[i,310:320]
    IE33=IE_rec[i,320:330]
    IE34=IE_rec[i,330:340]
    IE35=IE_rec[i,340:350]
    IE36=IE_rec[i,350:360]
    IE37=IE_rec[i,360:370]
    IE38=IE_rec[i,370:380]
    IE39=IE_rec[i,380:390]
    IE40=IE_rec[i,390:400]
    IE41=IE_rec[i,400:410]
    IE42=IE_rec[i,410:420]
    IE43=IE_rec[i,420:430]
    IE44=IE_rec[i,430:440]
    IE45=IE_rec[i,440:450]
    IE46=IE_rec[i,450:460]
    IE47=IE_rec[i,460:470]
    IE48=IE_rec[i,470:480]
    IE49=IE_rec[i,480:490]
    IE50=IE_rec[i,490:500]
    IE51=IE_rec[i,500:510]
    IE52=IE_rec[i,510:520]
    IE53=IE_rec[i,520:530]
    IE54=IE_rec[i,530:540]
    IE55=IE_rec[i,540:550]
    IE56=IE_rec[i,550:560]

    _IE_rec=np.column_stack((IE1,IE2,IE3,IE4,IE5,IE6,IE7,IE8,IE9,IE10,IE11,IE12,IE13,IE14,IE15,IE16,IE17,IE18,IE19,IE20,IE21,IE22,IE23,IE24,IE25,IE26,IE27,IE28,IE29,
                             IE30,IE31,IE32,IE33,IE34,IE35,IE36,IE37,IE38,IE39,IE40,IE41,IE42,IE43,IE44,IE45,IE46,IE47,IE48,IE49,IE50,IE51,IE52,IE53,IE54,IE55,IE56))
        
    data.append(_IE_rec)
IE_rec=np.array(data)

# (10) Fourier-transformed Electron Affinity (10X56 matrix)
EA_rec = np.asarray(EA_rec)
data=[]
for i in range (0, data_size):
    EA1=EA_rec[i,0:10]
    EA2=EA_rec[i,10:20]
    EA3=EA_rec[i,20:30]
    EA4=EA_rec[i,30:40]
    EA5=EA_rec[i,40:50]
    EA6=EA_rec[i,50:60]
    EA7=EA_rec[i,60:70]
    EA8=EA_rec[i,70:80]
    EA9=EA_rec[i,80:90]
    EA10=EA_rec[i,90:100]
    EA11=EA_rec[i,100:110]
    EA12=EA_rec[i,110:120]
    EA13=EA_rec[i,120:130]
    EA14=EA_rec[i,130:140]
    EA15=EA_rec[i,140:150]
    EA16=EA_rec[i,150:160]
    EA17=EA_rec[i,160:170]
    EA18=EA_rec[i,170:180]
    EA19=EA_rec[i,180:190]
    EA20=EA_rec[i,190:200]
    EA21=EA_rec[i,200:210]
    EA22=EA_rec[i,210:220]
    EA23=EA_rec[i,220:230]
    EA24=EA_rec[i,230:240]
    EA25=EA_rec[i,240:250]
    EA26=EA_rec[i,250:260]
    EA27=EA_rec[i,260:270]
    EA28=EA_rec[i,270:280]
    EA29=EA_rec[i,280:290]
    EA30=EA_rec[i,290:300]
    EA31=EA_rec[i,300:310]
    EA32=EA_rec[i,310:320]
    EA33=EA_rec[i,320:330]
    EA34=EA_rec[i,330:340]
    EA35=EA_rec[i,340:350]
    EA36=EA_rec[i,350:360]
    EA37=EA_rec[i,360:370]
    EA38=EA_rec[i,370:380]
    EA39=EA_rec[i,380:390]
    EA40=EA_rec[i,390:400]
    EA41=EA_rec[i,400:410]
    EA42=EA_rec[i,410:420]
    EA43=EA_rec[i,420:430]
    EA44=EA_rec[i,430:440]
    EA45=EA_rec[i,440:450]
    EA46=EA_rec[i,450:460]
    EA47=EA_rec[i,460:470]
    EA48=EA_rec[i,470:480]
    EA49=EA_rec[i,480:490]
    EA50=EA_rec[i,490:500]
    EA51=EA_rec[i,500:510]
    EA52=EA_rec[i,510:520]
    EA53=EA_rec[i,520:530]
    EA54=EA_rec[i,530:540]
    EA55=EA_rec[i,540:550]
    EA56=EA_rec[i,550:560]

    _EA_rec=np.column_stack((EA1,EA2,EA3,EA4,EA5,EA6,EA7,EA8,EA9,EA10,EA11,EA12,EA13,EA14,EA15,EA16,EA17,EA18,EA19,EA20,EA21,EA22,EA23,EA24,EA25,EA26,EA27,EA28,EA29,
                             EA30,EA31,EA32,EA33,EA34,EA35,EA36,EA37,EA38,EA39,EA40,EA41,EA42,EA43,EA44,EA45,EA46,EA47,EA48,EA49,EA50,EA51,EA52,EA53,EA54,EA55,EA56))
                
    data.append(_EA_rec)
EA_rec=np.array(data)


# (11) Fourier-transformed Block (4X56 matrix)
BK_rec = np.asarray(BK_rec)
data=[]
for i in range (0, data_size):
    BK1=BK_rec[i,0:4]
    BK2=BK_rec[i,4:8]
    BK3=BK_rec[i,8:12]
    BK4=BK_rec[i,12:16]
    BK5=BK_rec[i,16:20]
    BK6=BK_rec[i,20:24]
    BK7=BK_rec[i,24:28]
    BK8=BK_rec[i,28:32]
    BK9=BK_rec[i,32:36]
    BK10=BK_rec[i,36:40]
    BK11=BK_rec[i,40:44]
    BK12=BK_rec[i,44:48]
    BK13=BK_rec[i,48:52]
    BK14=BK_rec[i,52:56]
    BK15=BK_rec[i,56:60]
    BK16=BK_rec[i,60:64]
    BK17=BK_rec[i,64:68]
    BK18=BK_rec[i,68:72]
    BK19=BK_rec[i,72:76]
    BK20=BK_rec[i,76:80]
    BK21=BK_rec[i,80:84]
    BK22=BK_rec[i,84:88]
    BK23=BK_rec[i,88:92]
    BK24=BK_rec[i,92:96]
    BK25=BK_rec[i,96:100]
    BK26=BK_rec[i,100:104]
    BK27=BK_rec[i,104:108]
    BK28=BK_rec[i,108:112]
    BK29=BK_rec[i,112:116]
    BK30=BK_rec[i,116:120]
    BK31=BK_rec[i,120:124]
    BK32=BK_rec[i,124:128]
    BK33=BK_rec[i,128:132]
    BK34=BK_rec[i,132:136]
    BK35=BK_rec[i,136:140]
    BK36=BK_rec[i,140:144]
    BK37=BK_rec[i,144:148]
    BK38=BK_rec[i,148:152]
    BK39=BK_rec[i,152:156]
    BK40=BK_rec[i,156:160]
    BK41=BK_rec[i,160:164]
    BK42=BK_rec[i,164:168]
    BK43=BK_rec[i,168:172]
    BK44=BK_rec[i,172:176]
    BK45=BK_rec[i,176:180]
    BK46=BK_rec[i,180:184]
    BK47=BK_rec[i,184:188]
    BK48=BK_rec[i,188:192]
    BK49=BK_rec[i,192:196]
    BK50=BK_rec[i,196:200]
    BK51=BK_rec[i,200:204]
    BK52=BK_rec[i,204:208]
    BK53=BK_rec[i,208:212]
    BK54=BK_rec[i,212:216]
    BK55=BK_rec[i,216:220]
    BK56=BK_rec[i,220:224]
    
    _BK_rec=np.column_stack((BK1,BK2,BK3,BK4,BK5,BK6,BK7,BK8,BK9,BK10,BK11,BK12,BK13,BK14,BK15,BK16,BK17,BK18,BK19,BK20,BK21,BK22,BK23,BK24,BK25,BK26,BK27,BK28,BK29,
                             BK30,BK31,BK32,BK33,BK34,BK35,BK36,BK37,BK38,BK39,BK40,BK41,BK42,BK43,BK44,BK45,BK46,BK47,BK48,BK49,BK50,BK51,BK52,BK53,BK54,BK55,BK56))
        
    data.append(_BK_rec)
BK_rec=np.array(data)

# (12) Fourier-transformed Molar Volume (10X56 matrix)
MV_rec = np.asarray(MV_rec)
data=[]
for i in range (0, data_size):
    MV1=MV_rec[i,0:10]
    MV2=MV_rec[i,10:20]
    MV3=MV_rec[i,20:30]
    MV4=MV_rec[i,30:40]
    MV5=MV_rec[i,40:50]
    MV6=MV_rec[i,50:60]
    MV7=MV_rec[i,60:70]
    MV8=MV_rec[i,70:80]
    MV9=MV_rec[i,80:90]
    MV10=MV_rec[i,90:100]
    MV11=MV_rec[i,100:110]
    MV12=MV_rec[i,110:120]
    MV13=MV_rec[i,120:130]
    MV14=MV_rec[i,130:140]
    MV15=MV_rec[i,140:150]
    MV16=MV_rec[i,150:160]
    MV17=MV_rec[i,160:170]
    MV18=MV_rec[i,170:180]
    MV19=MV_rec[i,180:190]
    MV20=MV_rec[i,190:200]
    MV21=MV_rec[i,200:210]
    MV22=MV_rec[i,210:220]
    MV23=MV_rec[i,220:230]
    MV24=MV_rec[i,230:240]
    MV25=MV_rec[i,240:250]
    MV26=MV_rec[i,250:260]
    MV27=MV_rec[i,260:270]
    MV28=MV_rec[i,270:280]
    MV29=MV_rec[i,280:290]
    MV30=MV_rec[i,290:300]
    MV31=MV_rec[i,300:310]
    MV32=MV_rec[i,310:320]
    MV33=MV_rec[i,320:330]
    MV34=MV_rec[i,330:340]
    MV35=MV_rec[i,340:350]
    MV36=MV_rec[i,350:360]
    MV37=MV_rec[i,360:370]
    MV38=MV_rec[i,370:380]
    MV39=MV_rec[i,380:390]
    MV40=MV_rec[i,390:400]
    MV41=MV_rec[i,400:410]
    MV42=MV_rec[i,410:420]
    MV43=MV_rec[i,420:430]
    MV44=MV_rec[i,430:440]
    MV45=MV_rec[i,440:450]
    MV46=MV_rec[i,450:460]
    MV47=MV_rec[i,460:470]
    MV48=MV_rec[i,470:480]
    MV49=MV_rec[i,480:490]
    MV50=MV_rec[i,490:500]
    MV51=MV_rec[i,500:510]
    MV52=MV_rec[i,510:520]
    MV53=MV_rec[i,520:530]
    MV54=MV_rec[i,530:540]
    MV55=MV_rec[i,540:550]
    MV56=MV_rec[i,550:560]

    _MV_rec=np.column_stack((MV1,MV2,MV3,MV4,MV5,MV6,MV7,MV8,MV9,MV10,MV11,MV12,MV13,MV14,MV15,MV16,MV17,MV18,MV19,MV20,MV21,MV22,MV23,MV24,MV25,MV26,MV27,MV28,MV29,
                             MV30,MV31,MV32,MV33,MV34,MV35,MV36,MV37,MV38,MV39,MV40,MV41,MV42,MV43,MV44,MV45,MV46,MV47,MV48,MV49,MV50,MV51,MV52,MV53,MV54,MV55,MV56))
        
    data.append(_MV_rec)
MV_rec=np.array(data)

# (13) Fourier-transformed Average Ionic Radius (10X56 matrix)
IR_rec = np.asarray(IR_rec)
data=[]
for i in range (0, data_size):
    IR1=IR_rec[i,0:10]
    IR2=IR_rec[i,10:20]
    IR3=IR_rec[i,20:30]
    IR4=IR_rec[i,30:40]
    IR5=IR_rec[i,40:50]
    IR6=IR_rec[i,50:60]
    IR7=IR_rec[i,60:70]
    IR8=IR_rec[i,70:80]
    IR9=IR_rec[i,80:90]
    IR10=IR_rec[i,90:100]
    IR11=IR_rec[i,100:110]
    IR12=IR_rec[i,110:120]
    IR13=IR_rec[i,120:130]
    IR14=IR_rec[i,130:140]
    IR15=IR_rec[i,140:150]
    IR16=IR_rec[i,150:160]
    IR17=IR_rec[i,160:170]
    IR18=IR_rec[i,170:180]
    IR19=IR_rec[i,180:190]
    IR20=IR_rec[i,190:200]
    IR21=IR_rec[i,200:210]
    IR22=IR_rec[i,210:220]
    IR23=IR_rec[i,220:230]
    IR24=IR_rec[i,230:240]
    IR25=IR_rec[i,240:250]
    IR26=IR_rec[i,250:260]
    IR27=IR_rec[i,260:270]
    IR28=IR_rec[i,270:280]
    IR29=IR_rec[i,280:290]
    IR30=IR_rec[i,290:300]
    IR31=IR_rec[i,300:310]
    IR32=IR_rec[i,310:320]
    IR33=IR_rec[i,320:330]
    IR34=IR_rec[i,330:340]
    IR35=IR_rec[i,340:350]
    IR36=IR_rec[i,350:360]
    IR37=IR_rec[i,360:370]
    IR38=IR_rec[i,370:380]
    IR39=IR_rec[i,380:390]
    IR40=IR_rec[i,390:400]
    IR41=IR_rec[i,400:410]
    IR42=IR_rec[i,410:420]
    IR43=IR_rec[i,420:430]
    IR44=IR_rec[i,430:440]
    IR45=IR_rec[i,440:450]
    IR46=IR_rec[i,450:460]
    IR47=IR_rec[i,460:470]
    IR48=IR_rec[i,470:480]
    IR49=IR_rec[i,480:490]
    IR50=IR_rec[i,490:500]
    IR51=IR_rec[i,500:510]
    IR52=IR_rec[i,510:520]
    IR53=IR_rec[i,520:530]
    IR54=IR_rec[i,530:540]
    IR55=IR_rec[i,540:550]
    IR56=IR_rec[i,550:560]

    _IR_rec=np.column_stack((IR1,IR2,IR3,IR4,IR5,IR6,IR7,IR8,IR9,IR10,IR11,IR12,IR13,IR14,IR15,IR16,IR17,IR18,IR19,IR20,IR21,IR22,IR23,IR24,IR25,IR26,IR27,IR28,IR29,
                             IR30,IR31,IR32,IR33,IR34,IR35,IR36,IR37,IR38,IR39,IR40,IR41,IR42,IR43,IR44,IR45,IR46,IR47,IR48,IR49,IR50,IR51,IR52,IR53,IR54,IR55,IR56))
            
    data.append(_IR_rec)
IR_rec=np.array(data)

# (14) Fourier-transformed Polarizability (10X56 matrix)
PZ_rec = np.asarray(PZ_rec)
data=[]
for i in range (0, data_size):
    PZ1=PZ_rec[i,0:10]
    PZ2=PZ_rec[i,10:20]
    PZ3=PZ_rec[i,20:30]
    PZ4=PZ_rec[i,30:40]
    PZ5=PZ_rec[i,40:50]
    PZ6=PZ_rec[i,50:60]
    PZ7=PZ_rec[i,60:70]
    PZ8=PZ_rec[i,70:80]
    PZ9=PZ_rec[i,80:90]
    PZ10=PZ_rec[i,90:100]
    PZ11=PZ_rec[i,100:110]
    PZ12=PZ_rec[i,110:120]
    PZ13=PZ_rec[i,120:130]
    PZ14=PZ_rec[i,130:140]
    PZ15=PZ_rec[i,140:150]
    PZ16=PZ_rec[i,150:160]
    PZ17=PZ_rec[i,160:170]
    PZ18=PZ_rec[i,170:180]
    PZ19=PZ_rec[i,180:190]
    PZ20=PZ_rec[i,190:200]
    PZ21=PZ_rec[i,200:210]
    PZ22=PZ_rec[i,210:220]
    PZ23=PZ_rec[i,220:230]
    PZ24=PZ_rec[i,220:230]
    PZ25=PZ_rec[i,220:230]
    PZ26=PZ_rec[i,220:230]
    PZ27=PZ_rec[i,260:270]
    PZ28=PZ_rec[i,270:280]
    PZ29=PZ_rec[i,280:290]
    PZ30=PZ_rec[i,290:300]
    PZ31=PZ_rec[i,300:310]
    PZ32=PZ_rec[i,310:320]
    PZ33=PZ_rec[i,320:330]
    PZ34=PZ_rec[i,330:340]
    PZ35=PZ_rec[i,340:350]
    PZ36=PZ_rec[i,350:360]
    PZ37=PZ_rec[i,360:370]
    PZ38=PZ_rec[i,370:380]
    PZ39=PZ_rec[i,380:390]
    PZ40=PZ_rec[i,390:400]
    PZ41=PZ_rec[i,400:410]
    PZ42=PZ_rec[i,410:420]
    PZ43=PZ_rec[i,420:430]
    PZ44=PZ_rec[i,430:440]
    PZ45=PZ_rec[i,440:450]
    PZ46=PZ_rec[i,450:460]
    PZ47=PZ_rec[i,460:470]
    PZ48=PZ_rec[i,470:480]
    PZ49=PZ_rec[i,480:490]
    PZ50=PZ_rec[i,490:500]
    PZ51=PZ_rec[i,500:510]
    PZ52=PZ_rec[i,510:520]
    PZ53=PZ_rec[i,520:530]
    PZ54=PZ_rec[i,530:540]
    PZ55=PZ_rec[i,540:550]
    PZ56=PZ_rec[i,550:560]

    _PZ_rec=np.column_stack((PZ1,PZ2,PZ3,PZ4,PZ5,PZ6,PZ7,PZ8,PZ9,PZ10,PZ11,PZ12,PZ13,PZ14,PZ15,PZ16,PZ17,PZ18,PZ19,PZ20,PZ21,PZ22,PZ23,PZ24,PZ25,PZ26,PZ27,PZ28,PZ29,
                             PZ30,PZ31,PZ32,PZ33,PZ34,PZ35,PZ36,PZ37,PZ38,PZ39,PZ40,PZ41,PZ42,PZ43,PZ44,PZ45,PZ46,PZ47,PZ48,PZ49,PZ50,PZ51,PZ52,PZ53,PZ54,PZ55,PZ56))
                
    data.append(_PZ_rec)
PZ_rec=np.array(data)

# (15) Fourier-transformed Specific Heat (10X56 matrix)
SH_rec = np.asarray(SH_rec)
data=[]
for i in range (0, data_size):
    SH1=SH_rec[i,0:10]
    SH2=SH_rec[i,10:20]
    SH3=SH_rec[i,20:30]
    SH4=SH_rec[i,30:40]
    SH5=SH_rec[i,40:50]
    SH6=SH_rec[i,50:60]
    SH7=SH_rec[i,60:70]
    SH8=SH_rec[i,70:80]
    SH9=SH_rec[i,80:90]
    SH10=SH_rec[i,90:100]
    SH11=SH_rec[i,100:110]
    SH12=SH_rec[i,110:120]
    SH13=SH_rec[i,120:130]
    SH14=SH_rec[i,130:140]
    SH15=SH_rec[i,140:150]
    SH16=SH_rec[i,150:160]
    SH17=SH_rec[i,160:170]
    SH18=SH_rec[i,170:180]
    SH19=SH_rec[i,180:190]
    SH20=SH_rec[i,190:200]
    SH21=SH_rec[i,200:210]
    SH22=SH_rec[i,210:220]
    SH23=SH_rec[i,220:230]
    SH24=SH_rec[i,230:240]
    SH25=SH_rec[i,240:250]
    SH26=SH_rec[i,250:260]
    SH27=SH_rec[i,260:270]
    SH28=SH_rec[i,270:280]
    SH29=SH_rec[i,280:290]
    SH30=SH_rec[i,290:300]
    SH31=SH_rec[i,300:310]
    SH32=SH_rec[i,310:320]
    SH33=SH_rec[i,320:330]
    SH34=SH_rec[i,330:340]
    SH35=SH_rec[i,340:350]
    SH36=SH_rec[i,350:360]
    SH37=SH_rec[i,360:370]
    SH38=SH_rec[i,370:380]
    SH39=SH_rec[i,380:390]
    SH40=SH_rec[i,390:400]
    SH41=SH_rec[i,400:410]
    SH42=SH_rec[i,410:420]
    SH43=SH_rec[i,420:430]
    SH44=SH_rec[i,430:440]
    SH45=SH_rec[i,440:450]
    SH46=SH_rec[i,450:460]
    SH47=SH_rec[i,460:470]
    SH48=SH_rec[i,470:480]
    SH49=SH_rec[i,480:490]
    SH50=SH_rec[i,490:500]
    SH51=SH_rec[i,500:510]
    SH52=SH_rec[i,510:520]
    SH53=SH_rec[i,520:530]
    SH54=SH_rec[i,530:540]
    SH55=SH_rec[i,540:550]
    SH56=SH_rec[i,550:560]

    _SH_rec=np.column_stack((SH1,SH2,SH3,SH4,SH5,SH6,SH7,SH8,SH9,SH10,SH11,SH12,SH13,SH14,SH15,SH16,SH17,SH18,SH19,SH20,SH21,SH22,SH23,SH24,SH25,SH26,SH27,SH28,SH29,
                             SH30,SH31,SH32,SH33,SH34,SH35,SH36,SH37,SH38,SH39,SH40,SH41,SH42,SH43,SH44,SH45,SH46,SH47,SH48,SH49,SH50,SH51,SH52,SH53,SH54,SH55,SH56))
        
    data.append(_SH_rec)
SH_rec=np.array(data)

# (12) Fourier-transformed Thermal conductivity (10X56 matrix)
TC_rec = np.asarray(TC_rec)
data=[]
for i in range (0, data_size):
    TC1=TC_rec[i,0:10]
    TC2=TC_rec[i,10:20]
    TC3=TC_rec[i,20:30]
    TC4=TC_rec[i,30:40]
    TC5=TC_rec[i,40:50]
    TC6=TC_rec[i,50:60]
    TC7=TC_rec[i,60:70]
    TC8=TC_rec[i,70:80]
    TC9=TC_rec[i,80:90]
    TC10=TC_rec[i,90:100]
    TC11=TC_rec[i,100:110]
    TC12=TC_rec[i,110:120]
    TC13=TC_rec[i,120:130]
    TC14=TC_rec[i,130:140]
    TC15=TC_rec[i,140:150]
    TC16=TC_rec[i,150:160]
    TC17=TC_rec[i,160:170]
    TC18=TC_rec[i,170:180]
    TC19=TC_rec[i,180:190]
    TC20=TC_rec[i,190:200]
    TC21=TC_rec[i,200:210]
    TC22=TC_rec[i,210:220]
    TC23=TC_rec[i,220:230]
    TC24=TC_rec[i,230:240]
    TC25=TC_rec[i,240:250]
    TC26=TC_rec[i,250:260]
    TC27=TC_rec[i,260:270]
    TC28=TC_rec[i,270:280]
    TC29=TC_rec[i,280:290]
    TC30=TC_rec[i,290:300]
    TC31=TC_rec[i,300:310]
    TC32=TC_rec[i,310:320]
    TC33=TC_rec[i,320:330]
    TC34=TC_rec[i,330:340]
    TC35=TC_rec[i,340:350]
    TC36=TC_rec[i,350:360]
    TC37=TC_rec[i,360:370]
    TC38=TC_rec[i,370:380]
    TC39=TC_rec[i,380:390]
    TC40=TC_rec[i,390:400]
    TC41=TC_rec[i,400:410]
    TC42=TC_rec[i,410:420]
    TC43=TC_rec[i,420:430]
    TC44=TC_rec[i,430:440]
    TC45=TC_rec[i,440:450]
    TC46=TC_rec[i,450:460]
    TC47=TC_rec[i,460:470]
    TC48=TC_rec[i,470:480]
    TC49=TC_rec[i,480:490]
    TC50=TC_rec[i,490:500]
    TC51=TC_rec[i,500:510]
    TC52=TC_rec[i,510:520]
    TC53=TC_rec[i,520:530]
    TC54=TC_rec[i,530:540]
    TC55=TC_rec[i,540:550]
    TC56=TC_rec[i,550:560]

    _TC_rec=np.column_stack((TC1,TC2,TC3,TC4,TC5,TC6,TC7,TC8,TC9,TC10,TC11,TC12,TC13,TC14,TC15,TC16,TC17,TC18,TC19,TC20,TC21,TC22,TC23,TC24,TC25,TC26,TC27,TC28,TC29,
                             TC30,TC31,TC32,TC33,TC34,TC35,TC36,TC37,TC38,TC39,TC40,TC41,TC42,TC43,TC44,TC45,TC46,TC47,TC48,TC49,TC50,TC51,TC52,TC53,TC54,TC55,TC56))
        
    data.append(_TC_rec)
TC_rec=np.array(data)

PRF=np.hstack([RV,NP_rec,D_hkl,GN_rec,RN_rec,EN_rec,CR_rec,VL_rec,IE_rec,EA_rec,BK_rec,MV_rec,IR_rec,PZ_rec,SH_rec,TC_rec])

## Horizontal stacking to fit DSF row size
zeropad2 = np.zeros((data_size,18,56)) 
PRF = np.hstack([zeropad2,PRF])


## Merge DSF and PRF blocks together (column-wise) and include 57th hkl plane (i.e. zeropadded (000) crystal plane) 
zeropad3 = np.zeros((data_size,154,1))
_input_img = np.concatenate((DSF,PRF,zeropad3), -1)

print(_input_img.shape)
